#     if (lmb >= mean - sd & lmb <= mean + sd){
#       return(round(lmb))
#     }
#   }
# }
#
# # creates a data.frame of predator x, y positions in the littoral zone;
# # i.e., near shore
# # calculates the position from shore and the position downstream
# # can be used for either the left or right bank
#
# bank_preds <- function(number_of_bass, transect_length, lit_zone_size, zone_start, zone_end, current_transect){
#   data.frame(distance_downstream = runif(number_of_bass,
#                                          min = transect_length * current_transect - transect_length,
#                                          max = transect_length * current_transect),
#              distance_from_shore = runif(number_of_bass,
#                                          min = zone_start,
#                                          max = zone_end)) %>%
#     arrange(distance_downstream)
# }
#
# # creates a data.frame of predator x, y positions in the channel area
#
# channel_preds <- function(number_of_bass, transect_length, lit_zone_size, channel_width, current_transect){
#   data.frame(distance_downstream = runif(number_of_bass,
#                                          min = transect_length * current_transect - transect_length,
#                                          max = transect_length * current_transect),
#              distance_from_shore = runif(number_of_bass,
#                                          min = lit_zone_size,
#                                          max = channel_width - lit_zone_size)) %>%
#     arrange(distance_downstream)
# }
#
# # calculates the number of lmb and stb per reach and their positions for each zone
# # compiles all points into one data.frame
#
# get_pred_postitions <- function(transect_length, n_transects, lit_zone_size, channel_width){
#   left_bank_preds_list <- vector(mode="list",length=n_transects)
#   right_bank_preds_list <- vector(mode="list",length=n_transects)
#   channel_preds_list <- vector(mode="list",length=n_transects)
#
#   for(i in seq(n_transects)){
#     lmb <-  number_of_lmb()
#     stripers <- number_of_stripers()
#
#     left_bank_preds <- bank_preds(lmb / 2 + stripers / 4,
#                                   transect_length,
#                                   lit_zone_size,
#                                   0,
#                                   lit_zone_size,
#                                   i)
#     right_bank_preds <- bank_preds(lmb / 2 + stripers / 4,
#                                    transect_length,
#                                    lit_zone_size,
#                                    channel_width - lit_zone_size,
#                                    channel_width,
#                                    i)
#     channel_preds <- channel_preds(stripers / 2,
#                                    transect_length,
#                                    lit_zone_size,
#                                    channel_width,
#                                    i)
#     left_bank_preds_list[[i]] <- left_bank_preds
#     right_bank_preds_list[[i]] <- right_bank_preds
#     channel_preds_list[[i]] <- channel_preds
#   }
#   df <- bind_rows(left_bank_preds_list, right_bank_preds_list, channel_preds_list) %>%
#     arrange(distance_downstream)
#
# }
# creates and overlays a raster onto the predator positons
# raster size mimics the cells in netlogo
# returns a data.frame with coordinates for the cells and counts of fish in each cell
create_stream_raster_frame <- function(df,
transect_length = default_transect_length,
channel_width = default_channel_width,
grid_size = default_grid_size,
n_transects = default_n_transects){
r <- raster(xmn = 0,
ymn = 0,
xmx = transect_length * n_transects,
ymx = channel_width,
res = grid_size)
r[] <- 0
tab <- table(cellFromXY(r, df))
r[as.numeric(names(tab))] <- tab
d <- data.frame(coordinates(r), count=r[])
}
# calculates encounter probability for each cell
# based on the idea that each predator will engage prey with a certain radius
# total area occupied by predators divided by cell area is the encounter probability
calc_enc_probs <- function(df,
grid_size = default_grid_size,
reaction_dis = default_reaction_dis){
data.frame(coordinates(df), count=df[]) %>%
mutate(pred_area = count * reaction_dis^2 * pi,
enc_prob = pred_area / grid_size^2)
}
# graphs the positions of all predators in the stream
graph_pred_positions <- function(df){
ggplot(df, aes(x = distance_downstream)) +
theme_classic(base_size = 30) +
labs(y = "Distance from left bank (m)", x = "Distance downstream (m)") +
geom_point(aes(y = distance_from_shore))
}
# graphs a heatmap of encounter probabilities
graph_enc_probs <- function(df){
pa  <- wes_palettes %>%
names()
pal <-  wes_palette(name = pa[7], n = 10, type = "continuous")
ggplot(df, aes(x, y, fill = enc_prob)) +
labs(y = "Distance from left bank (m)", x = "Distance downstream (m)") +
geom_tile() +
scale_fill_gradientn(colors=pal)
}
lmb_calc <- function(n,
mean = 333,
sd = 195){
draws <- rnorm(2*n, mean, sd)
draws <- draws[draws > 0][1:n]
}
striper_calc <- function(n,
agg_ratio = 1/3,
mean_low = 60,
sd_low = 43,
mean_high = 870,
sd_high = 491.5){
aggs <- rnorm(n, mean_high, sd_high)
not_aggs <- rnorm(2*n, mean_low, sd_low)
aggs <- aggs[aggs>0][1:round(n * agg_ratio)]
not_aggs <- not_aggs[not_aggs > 0][1:(n-length(aggs))]
stripers <- sample(c(aggs, not_aggs), n)
}
distance_downstream <- function(number_of_bass,
transect_length = default_transect_length,
current_transect){
runif(number_of_bass,
min = transect_length * current_transect - transect_length,
max = transect_length * current_transect)
}
distance_from_shore <- function(number_of_bass, min, max){
distance_from_shore = runif(number_of_bass,
min = min,
max = max)
}
get_pred_postitions <- function(transect_length = default_transect_length,
n_transects = default_n_transects,
lit_zone_size = default_lit_zone_size,
channel_width = default_channel_width){
left_bank_dis_ds <- vector(mode="list",length=n_transects)
left_bank_dis_fr_s <- vector(mode="list",length=n_transects)
right_bank_dis_ds <- vector(mode="list",length=n_transects)
right_bank_dis_fr_s <- vector(mode="list",length=n_transects)
channel_dis_ds <- vector(mode="list",length=n_transects)
channel_dis_fr_s <- vector(mode="list",length=n_transects)
lmb <- lmb_calc(n_transects)
stripers <- striper_calc(n_transects)
for(i in seq(n_transects)){
lb_ds <- distance_downstream(lmb[i] / 2 + stripers[i] / 4, transect_length, i)
lb_fs <- distance_from_shore(lmb[i] / 2 + stripers[i] / 4, 0, lit_zone_size)
rb_ds <- distance_downstream(lmb[i] / 2 + stripers[i] / 4, transect_length, i)
rb_fs <- distance_from_shore(lmb[i] / 2 + stripers[i] / 4, channel_width - lit_zone_size, channel_width)
ch_ds <- distance_downstream(stripers[i] / 2, transect_length, i)
ch_fs <- distance_from_shore(stripers[i] / 2, lit_zone_size, channel_width - lit_zone_size)
left_bank_dis_ds[[i]] <- lb_ds
left_bank_dis_fr_s[[i]] <- lb_fs
right_bank_dis_ds[[i]] <- rb_ds
right_bank_dis_fr_s[[i]] <- rb_fs
channel_dis_ds[[i]] <- ch_ds
channel_dis_fr_s[[i]] <- ch_fs
}
df <- data.frame(distance_downstream = unlist(c(left_bank_dis_ds,
right_bank_dis_ds,
channel_dis_ds)),
distance_from_shore = unlist(c(left_bank_dis_fr_s,
right_bank_dis_fr_s,
channel_dis_fr_s))) %>%
arrange(distance_downstream)
}
tic()
pred_pos <- get_pred_postitions()
stream_grid_frame <- create_stream_raster_frame(pred_pos)
enc_probs <- calc_enc_probs(stream_grid_frame)
graph_pred_positions(pred_pos)
graph_enc_probs(enc_probs)
default_n_transects  <- 10
tic()
pred_pos <- get_pred_postitions()
stream_grid_frame <- create_stream_raster_frame(pred_pos)
enc_probs <- calc_enc_probs(stream_grid_frame)
graph_pred_positions(pred_pos)
graph_enc_probs(enc_probs)
source("~/Documents/Programming/predation/survival_runs.R")
library("rstudioapi")
library('tidyverse')
library('future.apply')
plan(multisession)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source('generate_preds.R')
source('main.R')
# set-up values
# pred_pos <- get_pred_postitions()
# stream_grid_frame <- create_stream_raster_frame(pred_pos)
# enc_probs <- calc_enc_probs(stream_grid_frame)
default_base_pred_success <- 0.8
default_reach_pred_min <- 1 - default_base_pred_success
# survival_table <- predation_survival_driver_func()
# num_trans <- calculate_num_trans_traversed()
calculate_num_trans_traversed <- function(transect_length=default_transect_length,
n_transects=default_n_transects,
grid_size=default_grid_size){
round(transect_length * n_transects / grid_size)
}
get_enc_prob_vector <- function(enc_prob_dataframe){
enc_prob_dataframe %>% pull(enc_prob)
}
randomly_sample_encounter_probs <- function(enc_probs, num_trans_traversed){
sample(enc_probs, num_trans_traversed)
}
calcule_risk_modifier <- function(survival_table, selected_variable, variable_magnitude){
survival_table %>%
filter(variable == as.character(selected_variable) & x == as.character(variable_magnitude)) %>%
pull(survival)
}
set_up_dataframe_of_fish_lengths <- function(number_of_fish, mean = 12, sd = (1.7/14) * mean, precision = 1){
vals <- round(rnorm(2*number_of_fish, mean, sd), precision)
vals <- vals[vals>0][1:number_of_fish]
data.frame(fish = (seq(number_of_fish)), length = vals)
}
calculate_encounter_prob_based_on_length <- function(fish_length_boost, enc_prob){
encounter_check_values <- (1- fish_length_boost) * enc_prob
}
check_if_encounter_occurs <- function(encounter_prob_based_on_length){
encounter <- sample(c(0, 1), size = 1, prob = c(1 - encounter_prob_based_on_length, encounter_prob_based_on_length))
}
evaluate_encounter <- function(pred_success = default_base_pred_success, pred_min = default_reach_pred_min){
survival <- sample(c(0,1), 1, prob = c(pred_success, pred_min))
if(survival == 1.0){
outcome <- 1.0
} else {
outcome <- 0
}
}
encounter_simulator <- function(encounter_occurrence){
if(encounter_occurrence == 1){
outcome <- evaluate_encounter()
} else {
outcome <- 1
}
return(outcome)
}
encounter_frame <- function(fish_number, enc_prob_vector, num_trans_traversed){
data.frame(fish = fish_number, enc_prob = randomly_sample_encounter_probs(enc_prob_vector, num_trans_traversed))
}
add_length_survival_boost <- function(fish_frame, surv_table){
fish_frame %>%
mutate(survival_boost = lapply(length, FUN = calcule_risk_modifier, survival_table = surv_table, selected_variable = 'length'))
}
create_frame_of_all_cells_traversed_per_fish <- function(fish_vector, enc_probs, num_trans){
df <- bind_rows(lapply(fish_vector,
FUN = encounter_frame,
enc_prob_vector = enc_probs,
num_trans_traversed = num_trans))
}
combine_encounter_frame_and_fish_frame <- function(fish_frame, enc_frame){
inner_join(fish_frame, enc_frame, by = 'fish')
}
add_encounter_simulation_columns <- function(combined_frame){
combined_frame%>%
mutate(survival_boost = as.numeric(survival_boost),
enc_prob = as.numeric(enc_prob),
modified_enc = calculate_encounter_prob_based_on_length(survival_boost, enc_prob),
encounter = lapply(modified_enc, check_if_encounter_occurs),
alive = as.numeric(lapply(encounter, encounter_simulator)))
}
evaluate_final_status_of_fish <- function(outcome_total, num_trans_traversed){
if(outcome_total < num_trans_traversed){
final_status <- 0
} else {
final_status <- 1
}
return(as.numeric(final_status))
}
sum_encounter_outcomes <- function(df){
df %>%
group_by(fish) %>%
summarize(total_alive_outcomes = sum(as.numeric(alive)))
}
calculate_number_of_survivors <- function(fish_summary_frame, num_trans_traversed){
fish_summary_frame %>%
mutate(final_status = lapply(total_alive_outcomes, FUN = evaluate_final_status_of_fish, num_trans_traversed)) %>%
unnest(final_status) %>%
summarize(num_surviving = sum(final_status))
}
calculat_proportion_of_survivors <- function(number_of_survivors, number_of_fish){
proportion_of_survivors <- number_of_survivors[[1]] / number_of_fish
}
survival_simulation_driver <- function(number_of_fish, mean_fish_length, total_transects){
num_trans <- calculate_num_trans_traversed(n_transects = total_transects)
pred_pos <- get_pred_postitions(n_transects = total_transects)
stream_grid_frame <- create_stream_raster_frame(pred_pos, n_transects = total_transects)
enc_prob_frame <- calc_enc_probs(stream_grid_frame)
enc_probs <- get_enc_prob_vector(enc_prob_frame)
surv_table <- predation_survival_driver_func()
fish_frame <- set_up_dataframe_of_fish_lengths(number_of_fish, mean = mean_fish_length)
fish_frame_with_survival_from_length <- add_length_survival_boost(fish_frame,surv_table)
cells_traversed <- create_frame_of_all_cells_traversed_per_fish(fish_frame_with_survival_from_length$fish, enc_probs, num_trans)
joined_fish_cell_traversed <- combine_encounter_frame_and_fish_frame(fish_frame_with_survival_from_length, cells_traversed)
joined_frame_with_sim_cols <- add_encounter_simulation_columns(joined_fish_cell_traversed)
fish_summary_frame <- sum_encounter_outcomes(joined_frame_with_sim_cols)
number_of_survivors <- calculate_number_of_survivors(fish_summary_frame, num_trans)
proprtion_of_survivors <- calculat_proportion_of_survivors(number_of_survivors, number_of_fish)
}
#### using future apply
future_apply_calculate_number_of_survivors <- function(fish_summary_frame, num_trans_traversed){
fish_summary_frame %>%
mutate(final_status = future_lapply(total_alive_outcomes, FUN = evaluate_final_status_of_fish, num_trans_traversed)) %>%
unnest(final_status) %>%
summarize(num_surviving = sum(final_status))
}
future_apply_add_encounter_simulation_columns <- function(combined_frame){
combined_frame%>%
mutate(survival_boost = as.numeric(survival_boost),
enc_prob = as.numeric(enc_prob),
modified_enc = calculate_encounter_prob_based_on_length(survival_boost, enc_prob),
encounter = future_lapply(modified_enc, check_if_encounter_occurs, future.seed=TRUE),
alive = as.numeric(lapply(encounter, encounter_simulator)))
}
future_apply_add_length_survival_boost <- function(fish_frame, surv_table){
fish_frame %>%
mutate(survival_boost = future_lapply(length, FUN = calcule_risk_modifier, survival_table = surv_table, selected_variable = 'length',future.seed=TRUE))
}
future_apply_create_frame_of_all_cells_traversed_per_fish <- function(fish_vector, enc_probs, num_trans){
df <- bind_rows(future_lapply(fish_vector,
FUN = encounter_frame,
enc_prob_vector = enc_probs,
num_trans_traversed = num_trans,
future.seed=TRUE))
}
future_apply_survival_simulation_driver <- function(number_of_fish, mean_fish_length, total_transects){
num_trans <- calculate_num_trans_traversed(n_transects = total_transects)
pred_pos <- get_pred_postitions(n_transects = total_transects)
stream_grid_frame <- create_stream_raster_frame(pred_pos, n_transects = total_transects)
enc_prob_frame <- calc_enc_probs(stream_grid_frame)
enc_probs <- get_enc_prob_vector(enc_prob_frame)
surv_table <- predation_survival_driver_func()
fish_frame <- set_up_dataframe_of_fish_lengths(number_of_fish, mean = mean_fish_length)
fish_frame_with_survival_from_length <- future_apply_add_length_survival_boost(fish_frame,surv_table)
cells_traversed <- future_apply_create_frame_of_all_cells_traversed_per_fish(fish_frame_with_survival_from_length$fish, enc_probs, num_trans)
joined_fish_cell_traversed <- combine_encounter_frame_and_fish_frame(fish_frame_with_survival_from_length, cells_traversed)
joined_frame_with_sim_cols <- future_apply_add_encounter_simulation_columns(joined_fish_cell_traversed)
fish_summary_frame <- sum_encounter_outcomes(joined_frame_with_sim_cols)
number_of_survivors <- future_apply_calculate_number_of_survivors(fish_summary_frame, num_trans)
proprtion_of_survivors <- calculat_proportion_of_survivors(number_of_survivors, number_of_fish)
}
#### using future map
future_map_calculate_number_of_survivors <- function(fish_summary_frame, num_trans_traversed){
fish_summary_frame %>%
mutate(final_status = future_map(total_alive_outcomes, evaluate_final_status_of_fish, num_trans_traversed)) %>%
unnest(final_status) %>%
summarize(num_surviving = sum(final_status))
}
future_map_add_encounter_simulation_columns <- function(combined_frame){
combined_frame%>%
mutate(survival_boost = as.numeric(survival_boost),
enc_prob = as.numeric(enc_prob),
modified_enc = calculate_encounter_prob_based_on_length(survival_boost, enc_prob),
encounter = future_map(modified_enc, check_if_encounter_occurs, .options=furrr_options(seed=TRUE)),
alive = as.numeric(lapply(encounter, encounter_simulator)))
}
future_map_add_length_survival_boost <- function(fish_frame, surv_table){
fish_frame %>%
mutate(survival_boost = future_lapply(length, calcule_risk_modifier, survival_table = surv_table, selected_variable = 'length',future.seed=TRUE))
}
future_map_create_frame_of_all_cells_traversed_per_fish <- function(fish_vector, enc_probs, num_trans){
df <- bind_rows(future_map(fish_vector,
encounter_frame,
enc_prob_vector = enc_probs,
num_trans_traversed = num_trans,
.options=furrr_options(seed=TRUE)))
}
future_map_survival_simulation_driver <- function(number_of_fish, mean_fish_length, total_transects){
num_trans <- calculate_num_trans_traversed(n_transects = total_transects)
pred_pos <- get_pred_postitions(n_transects = total_transects)
stream_grid_frame <- create_stream_raster_frame(pred_pos, n_transects = total_transects)
enc_prob_frame <- calc_enc_probs(stream_grid_frame)
enc_probs <- get_enc_prob_vector(enc_prob_frame)
surv_table <- predation_survival_driver_func()
fish_frame <- set_up_dataframe_of_fish_lengths(number_of_fish, mean = mean_fish_length)
fish_frame_with_survival_from_length <- future_map_add_length_survival_boost(fish_frame,surv_table)
cells_traversed <- future_map_create_frame_of_all_cells_traversed_per_fish(fish_frame_with_survival_from_length$fish, enc_probs, num_trans)
joined_fish_cell_traversed <- combine_encounter_frame_and_fish_frame(fish_frame_with_survival_from_length, cells_traversed)
joined_frame_with_sim_cols <- future_map_add_encounter_simulation_columns(joined_fish_cell_traversed)
fish_summary_frame <- sum_encounter_outcomes(joined_frame_with_sim_cols)
number_of_survivors <- future_map_calculate_number_of_survivors(fish_summary_frame, num_trans)
proprtion_of_survivors <- calculat_proportion_of_survivors(number_of_survivors, number_of_fish)
}
lengths = seq(7, 15, by = 1)
reach_length_km = seq(1, 20, by=1)
library(furrr)
tic()
df <- expand.grid(mean_fish_length = lengths, distance_traveled = reach_length_km) %>%
arrange(mean_fish_length) %>%
mutate(survival = future_map2(mean_fish_length,distance_traveled,
future_map_survival_simulation_driver,
number_of_fish = 50,
.options=furrr_options(seed=TRUE)))
toc()
df2 <- df %>%
mutate(mean_fish_length = as.factor(mean_fish_length),
distance_traveled = as.numeric(distance_traveled),
log_survival = log(as.numeric(survival) + min(as.numeric(survival)[as.numeric(survival) > 0]) / 2))
labels = c(
"7" = "Mean length = 7 cm",
"8" = "Mean length = 8 cm",
"9" = "Mean length = 9 cm",
"10" = "Mean length = 10 cm",
"11" = "Mean length = 11 cm",
"12" = "Mean length = 12 cm",
"13" = "Mean length = 13 cm",
"14" = "Mean length = 14 cm",
"15" = "Mean length = 15 cm"
)
library(ggpubr)
ggplot(df2, aes(x = distance_traveled, y = log_survival)) +
geom_point() +
geom_smooth(method = "lm") +
stat_regline_equation(label.x = 1, label.y = -3.35, aes(label = ..eq.label..)) +
stat_regline_equation(label.x = 1, label.y = -3.85, aes(label = ..rr.label..)) +
facet_wrap(~ mean_fish_length, labeller = as_labeller(labels)) +
labs(title = "Log survival vs. distance traveled (km) per size class (cm)",
x = "Distance traveled (km)",
y = "Survival (log)") +
theme(panel.spacing=unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
default_n_transects  <- 20
source('generate_preds.R')
lengths = seq(7, 15, by = 1)
reach_length_km = seq(1, 20, by=1)
tic()
df <- expand.grid(mean_fish_length = lengths, distance_traveled = reach_length_km) %>%
arrange(mean_fish_length) %>%
mutate(survival = future_map2(mean_fish_length,distance_traveled,
future_map_survival_simulation_driver,
number_of_fish = 50,
.options=furrr_options(seed=TRUE)))
toc()
df2 <- df %>%
mutate(mean_fish_length = as.factor(mean_fish_length),
distance_traveled = as.numeric(distance_traveled),
log_survival = log(as.numeric(survival) + min(as.numeric(survival)[as.numeric(survival) > 0]) / 2))
labels = c(
"7" = "Mean length = 7 cm",
"8" = "Mean length = 8 cm",
"9" = "Mean length = 9 cm",
"10" = "Mean length = 10 cm",
"11" = "Mean length = 11 cm",
"12" = "Mean length = 12 cm",
"13" = "Mean length = 13 cm",
"14" = "Mean length = 14 cm",
"15" = "Mean length = 15 cm"
)
library(ggpubr)
ggplot(df2, aes(x = distance_traveled, y = log_survival)) +
geom_point() +
geom_smooth(method = "lm") +
stat_regline_equation(label.x = 1, label.y = -3.35, aes(label = ..eq.label..)) +
stat_regline_equation(label.x = 1, label.y = -3.85, aes(label = ..rr.label..)) +
facet_wrap(~ mean_fish_length, labeller = as_labeller(labels)) +
labs(title = "Log survival vs. distance traveled (km) per size class (cm)",
x = "Distance traveled (km)",
y = "Survival (log)") +
theme(panel.spacing=unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
ggplot(df2, aes(x = distance_traveled, y = log_survival)) +
geom_point() +
geom_smooth(method = "lm") +
#stat_regline_equation(label.x = 1, label.y = -3.35, aes(label = ..eq.label..)) +
stat_regline_equation(label.x.npc = 0.85, label.y.npc = 0.85, aes(label = ..rr.label..)) +
facet_wrap(~ mean_fish_length, labeller = as_labeller(labels)) +
labs(title = "Log survival vs. distance traveled (km) per size class (cm)",
x = "Distance traveled (km)",
y = "Survival (log)") +
theme(panel.spacing=unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
ggplot(df2, aes(x = distance_traveled, y = log_survival)) +
geom_point() +
geom_smooth(method = "lm") +
#stat_regline_equation(label.x = 1, label.y = -3.35, aes(label = ..eq.label..)) +
stat_regline_equation(label.x.npc = 0.65, label.y.npc = 0.85, aes(label = ..rr.label..)) +
facet_wrap(~ mean_fish_length, labeller = as_labeller(labels)) +
labs(title = "Log survival vs. distance traveled (km) per size class (cm)",
x = "Distance traveled (km)",
y = "Survival (log)") +
theme(panel.spacing=unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
ggplot(df2, aes(x = distance_traveled, y = log_survival)) +
geom_point() +
geom_smooth(method = "lm") +
stat_regline_equation(label.x = 1, label.y = -3.35, aes(label = ..eq.label..)) +
stat_regline_equation(label.x = 1, label.y = -3.85, aes(label = ..rr.label..)) +
facet_wrap(~ mean_fish_length, labeller = as_labeller(labels)) +
labs(title = "Log survival vs. distance traveled (km) per size class (cm)",
x = "Distance traveled (km)",
y = "Survival (log)") +
theme(panel.spacing=unit(.05, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 1),
strip.background = element_rect(color = "black", size = 1))
