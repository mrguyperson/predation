library("tidyverse")
library("openxlsx")
install.packages("tidyverse")
library("tidyverse")
library("openxlsx")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/tidyr/tidyr_1.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
install.packages("tidyverse")
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- full_raw_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
head(predation_survival_driver_func())
library("tidyverse")
library("openxlsx")
##### Data on predation preventation from temperature (mortFishAqPredT) #####
# load the data
# This uses physological measures of predators to get the potential predation effect of T
predTData  <- function(){
read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, journal, species) %>%
mutate(unitless_value = 1-value/max(value)) %>%
ungroup()  %>%
select(x, variable, unitless_value)
}
##### Data on predation preventation from length (mortFishAqPredL) #####
# load the data and convert all metrics to daily survival
predLData <- function(){
read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
unitless_value = ifelse(units == "relative vlun.", 1-measure, dailySurvival)) %>%
rename(x = length_cm) %>%
select(x, variable, unitless_value)
}
##### Data on predation preventation from depth (mortFishAqPredD) #####
# load the data
# this uses the fractional occurenec of small fish as a proxy for survival
# what is the max possible survival
predationPreData <- function(){
read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByOccurence",
na.strings = "NA")
}
predDepthData  <- function(maxSurvival=0.9){
predationPreData() %>%
filter(fishSize_mm =="< 50",
variable == "Depth") %>%
mutate(fraction = cumlitaveFraction - lag(cumlitaveFraction),
unitless_value = fraction/max(fraction, na.rm = T)*maxSurvival) %>%
rename(x = value) %>%
select(x, variable, unitless_value)
}
##### Data on predation preventation from cover (mortFishAqPredH) #####
# load the data
# this uses the fractional occurenec of small fish as a proxy for survival
# what is the max possible survival
predationPreData <- function(){
read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByOccurence",
na.strings = "NA")
}
predDistData <- function(maxSurvival=0.9){
predationPreData() %>%
filter(fishSize_mm =="< 50",
variable == "Dis to Cover") %>%
mutate(fraction = cumlitaveFraction - lag(cumlitaveFraction),
fraction = ifelse(is.na(fraction), cumlitaveFraction, fraction),
unitless_value = fraction/max(fraction, na.rm = T)*maxSurvival) %>%
rename(x = value) %>%
select(variable, x, unitless_value)
}
full_raw_data  <- function(){
df <- bind_rows(predTData(), predLData(), predDepthData(), predDistData(.8))
df %>% mutate(variable = tolower(variable))
}
full_raw_data()
head(survival_prediction_table())
library("tidyverse")
library("rstudioapi")
library("broom")
# outputs a table of predicted survival values for each variable affecting predation
# df is intended to work with functions from prediction_tables.R
# model_table is intended to work with model_table.R
survival_prediction_table <- function(df, model_table){
df %>%
# nest the table per variable
nest(x = -variable) %>%
# join the x values with the table that has the glm models
inner_join(model_table, by = 'variable') %>%
# preditct survival values based on the x values and glms
mutate(survival = map2(fit, x, predict.glm, type='response')) %>%
# unnest the x values and survival values
unnest(c(x, survival)) %>%
# save the variable name, x value, and survival prediction
select(variable, x, survival)
}
head(survival_prediction_table())
df <- x_value_df(range_\)
df <- x_value_df(range_of_params())
model_table <- table_of_logistic_models(full_raw_data())
head(survival_prediction_table(df, model_table))
model_table
model_table %>%
unnest(cols)
model_table %>%
unnest(df)
table_of_logistic_models <- function(df){
df %>%
# nest the table per variable
nest(df = c(x, unitless_value), -variable) %>%
# add a new column of fitted glm models for each variable
mutate(fit = map(df, ~ glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .)))
}
model_table <- table_of_logistic_models(full_raw_data())
table_of_logistic_models <- function(df){
df %>%
# nest the table per variable
nest(c(x, unitless_value), -variable) %>%
# add a new column of fitted glm models for each variable
mutate(fit = map(df, ~ glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .)))
}
model_table <- table_of_logistic_models(full_raw_data())
library("tidyverse")
library("rstudioapi")
library("broom")
# creates a nested tibble of logistic fits to fish parameter data. intended to take
# full_raw_data() as df from data_processing.R
table_of_logistic_models <- function(df){
df %>%
# nest the table per variable
nest(-variable) %>%
# add a new column of fitted glm models for each variable
mutate(fit = map(df, ~ glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .)))
}
model_table <- table_of_logistic_models(full_raw_data())
df
full_df <- full_raw_data()
full_df %>%
nest(-variable)
full_df %>%
nest(data = c(x, unitless_value))
table_of_logistic_models <- function(df){
df %>%
# nest the table per variable
nest(data = c(x, unitless_value)) %>%
# add a new column of fitted glm models for each variable
mutate(fit = map(df, ~ glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .)))
}
model_table <- table_of_logistic_models(full_raw_data())
table_of_logistic_models <- function(df){
df %>%
# nest the table per variable
nest(data = c(x, unitless_value)) %>%
# add a new column of fitted glm models for each variable
mutate(fit = map(data, ~ glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .)))
}
model_table <- table_of_logistic_models(full_raw_data())
model_table
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- full_raw_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
head(predation_survival_driver_func())
setwd("~/Documents/predation")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival))
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
