library("tidyverse")
library("openxlsx")
install.packages("tidyverse")
library("tidyverse")
library("openxlsx")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/tidyr/tidyr_1.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
install.packages("tidyverse")
new_df <- function(df){
data.frame(variable = df[,1], X = seq(df[,2], df[,3], by = df[,4]))
}
my_list <- list()
my_list <- lapply(df, 1, new_df)
my_list <- list()
my_list <- lapply(df, 1, FUN = new_df)
my_list <- list()
my_list <- lapply(df, FUN = new_df)
df
df <- value_df()
library("tidyverse")
value_df <- function(){
data.frame(variable = c('temp', 'length', 'dis to cover', 'depth'),
min_x = c(0, 0, 0, 0),
max_x = c(30, 50, 3, 2),
interval = c(0.1, 0.1, 0.01, 0.01)
)
}
prediction_df <- function(factor, min_x, max_x, interval){
data.frame(variable = factor, x = seq(min_x, max_x, by = interval))
}
temp_df <- function(){
prediction_df('temp', 0, 30, 0.1)
}
length_df <- function(){
prediction_df('length', 0, 50, 0.1)
}
cover_df <- function(){
prediction_df('dis to cover', 0, 3, 0.01)
}
depth_df <- function(){
prediction_df('depth', 0, 2, 0.01)
}
full_prediction_df <- function(){
bind_rows(temp_df(), length_df(), cover_df(), depth_df())
}
new_prediction_df <- function(value_df){
data.frame(variable = value_df[1], x = seq(value_df[2], value_df[3], by = value_df[4]))
}
df <- value_df()
prediction_list = list()
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
prediction_list[[i]] <- new_df
}
bind_rows(prediction_list)
new_df <- function(df){
data.frame(variable = df[,1], x = seq(df[,2], df[,3], by = df[,4]))
}
my_list <- list()
my_list <- lapply(df, FUN = new_df)
df
my_list <- list()
my_list <- lapply(df, 1, FUN = new_df)
df
df[,1]
df[4]
new_df <- function(df){
data.frame(variable = df[1], x = seq(df[2], df[3], by = df[4]))
}
my_list <- list()
my_list <- lapply(df, 1, FUN = new_df)
my_list <- lapply(df, 1, FUN = new_df(df))
my_list <- list()
my_list <- apply(df, 1, new_df)
ddply(df, variable, new_df)
library("tidyverse")
ddply(df, variable, new_df)
tapply(df, variable, new_df)
library("dplyr")
tapply(df, variable, new_df)
df
tapply(df, 1, new_df)
tapply(df, new_df)
tapply(df, new_df)
prediction_df <- function(factor, min_x, max_x, interval){
data.frame(variable = factor, x = seq(min_x, max_x, by = interval))
}
temp_df <- function(){
prediction_df('temp', 0, 30, 0.1)
}
length_df <- function(){
prediction_df('length', 0, 50, 0.1)
}
cover_df <- function(){
prediction_df('dis to cover', 0, 3, 0.01)
}
depth_df <- function(){
prediction_df('depth', 0, 2, 0.01)
}
full_prediction_df <- function(){
bind_rows(temp_df(), length_df(), cover_df(), depth_df())
}
new_prediction_df <- function(value_df){
data.frame(variable = value_df[1], x = seq(value_df[2], value_df[3], by = value_df[4]))
}
value_df <- function(){
data.frame(variable = c('temp', 'length', 'dis to cover', 'depth'),
min_x = c(0, 0, 0, 0),
max_x = c(30, 50, 3, 2),
interval = c(0.1, 0.1, 0.01, 0.01)
)
}
# prediction_df <- function(factor, min_x, max_x, interval){
#   data.frame(variable = factor, x = seq(min_x, max_x, by = interval))
# }
#
# temp_df <- function(){
#   prediction_df('temp', 0, 30, 0.1)
# }
#
# length_df <- function(){
#   prediction_df('length', 0, 50, 0.1)
# }
#
# cover_df <- function(){
#   prediction_df('dis to cover', 0, 3, 0.01)
# }
#
# depth_df <- function(){
#   prediction_df('depth', 0, 2, 0.01)
# }
#
# full_prediction_df <- function(){
#   bind_rows(temp_df(), length_df(), cover_df(), depth_df())
# }
#
# new_prediction_df <- function(value_df){
#   data.frame(variable = value_df[1], x = seq(value_df[2], value_df[3], by = value_df[4]))
# }
df <- value_df()
prediction_list = list()
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
prediction_list[[i]] <- new_df
}
bind_rows(prediction_list)
print_func <- function(df){
print(df[1])
}
tapply(df, 1, print_func)
apply(df, 1, print_func)
print_func <- function(df){
print(seq(df[2], df[3], by = df[4]))
}
apply(df, 1, print_func)
print_func <- function(df){
print(seq(df[2], df[3])
}
print_func <- function(df){
print(seq(df[2], df[3]))
}
apply(df, 1, print_func)
print_func <- function(df){
print(df)
}
apply(df, 1, print_func)
print_func <- function(df){
print(  data.frame(variable = df[1], x = seq(df[2], df[3]))
)
}
apply(df, 1, print_func)
print_func <- function(df){
print(  data.frame(variable = df[1]))
}
apply(df, 1, print_func)
sapply(df, 1, print_func)
apply(df, 1, print_func)
sapply(df, 1, print_func)
sapply(df, print_func)
#library("here")
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#source("general_logistic_model.R")
source("data_processing.R")
# load the data (path and sheetName are currently hardcoded for testing)
model_table <- final_data() %>%
group_by(variable) %>%
summarize(fitVariable = glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .))
#library("here")
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#source("general_logistic_model.R")
source("data_processing.R")
# load the data (path and sheetName are currently hardcoded for testing)
model_table <- final_data() %>%
group_by(variable) %>%
do(fitVariable = glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .)) #%>%
model_table <- final_data() %>%
group_by(variable) %>%
fitVariable = glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .) #%>%
model_table <- final_data() %>%
group_by(variable) %>%
do(fit_variable = glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .)) #%>%
#unnest(fitVariable)
model <- function(model_table, factor){
model_table %>%
filter(variable == factor) %>%
select(fit_variable) %>%
.[[1]] %>%
.[[1]]
}
model_table <- final_data() %>%
group_by(variable) %>%
do(fit_variable = tidy(glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .))) #%>%
#unnest(fitVariable)
model_table <- final_data() %>%
group_by(variable) %>%
summarize(fit_variable = tidy(glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .))) #%>%
model_table
model_table <- final_data() %>%
#group_by(variable) %>%
summarize(fit_variable = tidy(glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .))) #%>%
model_table
model_table <- final_data() %>%
group_by(variable) %>%
summarize(tidy(glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .))) #%>%
#unnest(fitVariable)
model_table
do.call(new_df, df)
do.call(new_df(df), df)
apply(df, 1, new_df)
new_df <- function(df){
data.frame(variable = df[1], x = seq(df[2], df[3], by = df[4]))
}
apply(df, 1, new_df)
print_func <- function(df){
print(x = seq(df[2], df[3], by = df[4]))
apply(df, 1, print_func)
asfd
fsdfs
rtyy)
print_func <- function(df){
print(x = seq(df[2], df[3], by = df[4]))
}
apply(df, 1, print_func)
print_func <- function(df){
print(seq(df[2], df[3], by = df[4]))
}
apply(df, 1, print_func)
df
value_df <- function(){
tibble(variable = c('temp', 'length', 'dis to cover', 'depth'),
min_x = c(0, 0, 0, 0),
max_x = c(30, 50, 3, 2),
interval = c(0.1, 0.1, 0.01, 0.01)
)
}
df
df[2]
class(df[2])
class(df[[2])
class(df[[2])
class(df[[2]])
value_df <- function(){
tibble(variable = c('temp', 'length', 'dis to cover', 'depth'),
min_x = c(0.0, 0.0, 0.0, 0.0),
max_x = c(30, 50, 3, 2),
interval = c(0.1, 0.1, 0.01, 0.01)
)
}
#   prediction_df('depth', 0, 2, 0.01)
# }
#
# full_prediction_df <- function(){
#   bind_rows(temp_df(), length_df(), cover_df(), depth_df())
# }
#
# new_prediction_df <- function(value_df){
#   data.frame(variable = value_df[1], x = seq(value_df[2], value_df[3], by = value_df[4]))
# }
df <- value_df()
apply(df, 1, print_func)
df <- value_df()
prediction_list = list()
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
prediction_list[[i]] <- new_df
}
bind_rows(prediction_list)
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
prediction_list[[i]] <- new_df
}
library("tidyverse")
library("dplyr")
value_df <- function(){
tibble(variable = c('temp', 'length', 'dis to cover', 'depth'),
min_x = c(0.0, 0.0, 0.0, 0.0),
max_x = c(30, 50, 3, 2),
interval = c(0.1, 0.1, 0.01, 0.01)
)
}
#   prediction_df('depth', 0, 2, 0.01)
# }
#
# full_prediction_df <- function(){
#   bind_rows(temp_df(), length_df(), cover_df(), depth_df())
# }
#
# new_prediction_df <- function(value_df){
#   data.frame(variable = value_df[1], x = seq(value_df[2], value_df[3], by = value_df[4]))
# }
df <- value_df()
prediction_list = list()
source("~/Documents/predation/prediction_tables.R", echo=TRUE)
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
#prediction_list[[i]] <- new_df
}
value_df <- function(){
data.frame(variable = c('temp', 'length', 'dis to cover', 'depth'),
min_x = c(0.0, 0.0, 0.0, 0.0),
max_x = c(30, 50, 3, 2),
interval = c(0.1, 0.1, 0.01, 0.01)
)
}
df <- value_df()
prediction_list = list()
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
#prediction_list[[i]] <- new_df
}
bind_rows(prediction_list)
df <- value_df()
prediction_list = list()
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
prediction_list[[i]] <- new_df
}
bind_rows(prediction_list)
df
df[[1]]
df[1]
new_df <- function(df){
data.frame(variable = df[[1]], x = seq(df[[2]], df[[3]], by = df[[4]]))
}
apply(df, 1, new_df)
new_df(df)
new_df <- function(df){
data.frame(variable = df[1], x = seq(df[2], df[3], by = df[4]))
}
new_df(df)
new_df <- function(df){
data.frame(variable = df[,1], x = seq(df[,2], df[,3], by = df[,4]))
}
new_df(df)
apply(df, 1, new_df)
df[1]
df[1][1]
df[1,]
value_df <- function(){
data.frame(variable = c('temp', 'length', 'dis to cover', 'depth'),
min_x = c(0.0, 0.0, 0.0, 0.0),
max_x = c(3, 3, 3, 2),
interval = c(0.1, 0.1, 0.01, 0.01)
)
}
value_df <- function(){
data.frame(variable = c('temp', 'length', 'dis to cover', 'depth'),
min_x = c(0.0, 0.0, 0.0, 0.0),
max_x = c(3, 5, 3, 2),
interval = c(0.1, 0.1, 0.01, 0.01)
)
}
df <- value_df()
prediction_list = list()
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
prediction_list[[i]] <- new_df
}
bind_rows(prediction_list)
df <- data.frame(variable = 'temp',
min_x = 0,
max_x = 30,
interval = 0.1
)
df
apply(df, 1, new_df)
df[1]
df[2]
df[[2]]
new_df <- function(df){
data.frame(variable = df[[1]], x = seq(df[[2]], df[[3]], by = df[[4]]))
}
apply(df, 1, new_df)
new_df(df)
apply(df, 1, new_df)
lapply(df, new_df)
new_df <- function(df){
data.frame(variable = df$variable, x = seq(df$min_x, df$max_x, by = df$interval))
}
new_df(df)
apply(df, 1, new_df)
lapply(df, new_df)
new_df <- function(df){
variable = df$variable
min = df$min_x
max = df$max_x
interval = df$interval))
}
new_df <- function(df){
variable = df$variable
min = df$min_x
max = df$max_x
interval = df$interval
}
new_df(df)
apply(df, 1, new_df)
new_df <- function(df){
variable = df[1]
min = df[2]
max = df[3]
interval = df[4]
}
apply(df, 1, new_df)
new_df <- function(df){
variable = df[1]
min = df[2]
max = df[3]
interval = df[4]
data.frame(variable, x = seq(min, max, by=interval))
}
apply(df, 1, new_df)
new_df <- function(df){
variable = df[1],
min = df[2],
max = df[3],
interval = df[4]
#data.frame(variable, x = seq(min, max, by=interval))
}
x_value_df <- function(){
value_df()
prediction_list = list()
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
prediction_list[[i]] <- new_df
}
bind_rows(prediction_list)
}
x_value_df()
range_of_params_df <- function(){
data.frame(variable = c('temp', 'length', 'dis to cover', 'depth'),
min_x = c(0.0, 0.0, 0.0, 0.0),
max_x = c(30, 50, 3, 2),
interval = c(0.1, 0.1, 0.01, 0.01)
)
}
x_value_df <- function(){
value_df()
prediction_list = list()
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
prediction_list[[i]] <- new_df
}
bind_rows(prediction_list)
}
x_value_df <- function(){
df <- range_of_params_df()
prediction_list = list()
for (i in 1:nrow(df)){
new_df <- data.frame(variable = df[i,1], x = seq(df[i,2], df[i,3], by = df[i,4]))
prediction_list[[i]] <- new_df
}
bind_rows(prediction_list)
}
x_value_df()
