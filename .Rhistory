library("tidyverse")
library("openxlsx")
install.packages("tidyverse")
library("tidyverse")
library("openxlsx")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/tidyr/tidyr_1.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
install.packages("tidyverse")
setwd("~/Documents/predation")
source("~/Documents/predation/calculateinSALMOParameters.R", echo=TRUE)
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival))
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier",
!is.na(turb_NTU)) %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = dailySurvival-min(dailySurvival),
dailySurvival = dailySurvival/max(dailySurvival))
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$turb_NTU,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(turb_NTU)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# overide probably with new scaling should take out
mortFishAqPredL1 = -50
mortFishAqPredL9 = 35
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*turb_NTU)/(1+exp(LogistA+LogistB*turb_NTU)))
# Plot
ggplot(predLWFitData, aes(x = turb_NTU)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "T (C)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
predLData
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA")
predLData
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier")
predLData
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
# filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
predLData
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
# filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
##### Data on predation preventation from length (mortFishAqPredL) #####
# load the data and convert all metrics to daily survival
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
# filter(note != "outlier") %>%
mutate(dailySurvival = NA,
# dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
# dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
# dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
# filter(note != "outlier") %>%
mutate(dailySurvival = NA,
# dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
# dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
# dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
predLData
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
# filter(note != "outlier") %>%
mutate(#dailySurvival = NA,
# dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
# dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
# dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
# filter(note != "outlier") %>%
# mutate(dailySurvival = NA,
#        dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
#        dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
#        dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
#        dailySurvival = ifelse(units == "not eaten", measure, daily))
filter(units == "not eaten")
predLData
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
# filter(note != "outlier") %>%
# mutate(dailySurvival = NA,
#        dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
#        dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
#        dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
#        dailySurvival = ifelse(units == "not eaten", measure, daily))
filter(units == "not eaten") %>%
mutate(dailySurvival = measure)
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
source("~/Documents/predation/calculateinSALMOParameters.R", echo=TRUE)
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, daily))
# filter(units == "not eaten") %>%
# mutate(dailySurvival = measure)
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, daily))
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
#filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# filter(units == "not eaten") %>%
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
#filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# filter(units == "not eaten") %>%
# mutate(dailySurvival = measure)
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
