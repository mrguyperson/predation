inner_join(fitted, by = 'variable') %>%
mutate(survival = map2(fit, x, predict.glm(type='response'))) %>%
unnest(c(x, survival))
df %>%
nest(x = -variable) %>%
inner_join(fitted, by = 'variable') %>%
mutate(survival = map2(fit, x, predict.glm, type='response')) %>%
unnest(c(x, survival))
df <- x_value_df(range_of_params_df())
data <- final_data()
fitted <- data %>%
nest(data = c(x, unitless_value), cols=-variable) %>%
mutate(fit = map(data, ~ glm(unitless_value ~ x,
family = quasibinomial(logit),
#                              data = .))) %>%
# mutate(tidied = map(fit, tidy)) %>%
# unnest(tidied)
fitted
df %>%
nest(x = -variable) %>%
inner_join(fitted, by = 'variable') %>%
mutate(survival = map2(fit, x, predict.glm, type='response')) %>%
unnest(c(x, survival))
df <- x_value_df(range_of_params_df())
data <- final_data()
fitted <- data %>%
nest(data = c(x, unitless_value), cols=-variable) %>%
mutate(fit = map(data, ~ glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .))) #%>%
# mutate(tidied = map(fit, tidy)) %>%
# unnest(tidied)
fitted
df %>%
nest(x = -variable) %>%
inner_join(fitted, by = 'variable') %>%
mutate(survival = map2(fit, x, predict.glm, type='response')) %>%
unnest(c(x, survival))
fitted
data <- final_data()
fitted <- data %>%
nest(data = c(x, unitless_value), cols=-variable) %>%
mutate(fit = map(data, ~ glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .))) #%>%
# mutate(tidied = map(fit, tidy)) %>%
# unnest(tidied)
fitted
df <- x_value_df(range_of_params_df())
df %>%
nest(x = -variable) %>%
inner_join(fitted, by = 'variable') %>%
mutate(survival = map2(fit, x, predict.glm, type='response')) %>%
unnest(c(x, survival))
table_of_logistic_models <- function(df)
fitted <- df %>%
nest(df = c(x, unitless_value), cols=-variable) %>%
mutate(fit = map(df, ~ glm(unitless_value ~ x,
family = quasibinomial(logit),
data = .)))
table_of_logistic_models(final_data())
df <- table_of_logistic_models(final_data())
df
library("tidyverse")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
df
test <- survival_prediction_table(df = x_value_df(range_of_params_df()),
model_table = table_of_logistic_models(final_data()))
df <- x_value_df(range_of_params_df())
survival_prediction_table <- function(df, model_table){
df %>%
nest(x = -variable) %>%
inner_join(model_table, by = 'variable') %>%
mutate(survival = map2(fit, x, predict.glm, type='response')) %>%
unnest(c(x, survival)) %>%
select(variable, x, survival)
}
test <- survival_prediction_table(df = x_value_df(range_of_params_df()),
model_table = table_of_logistic_models(final_data()))
test
#library("here")
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#source("general_logistic_model.R")
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
predation_survival_driver_func <- function(){
raw_data <- final_data()
model_table <- table_of_logistic_models(raw_data)
x_values <- x_value_df(range_of_params())
survival_prediction_table <- (x_values, model_table)
}
# load the data (path and sheetName are currently hardcoded for testing)
#
#
# model_table <- final_data() %>%
#   group_by(variable) %>%
#   do(fit_variable = glm(unitless_value ~ x,
#                             family = quasibinomial(logit),
#                             data = .)) #%>%
#   #unnest(fitVariable)
#
# model_table <- final_data() %>%
#   group_by(variable) %>%
#   summarize(fit_variable = tidy(glm(unitless_value ~ x,
#                         family = quasibinomial(logit),
#                         data = .))) #%>%
# #unnest(fitVariable)
# model <- function(model_table, factor){
#   model_table %>%
#     filter(variable == factor) %>%
#     select(fit_variable) %>%
#     .[[1]] %>%
#     .[[1]]
# }
#
#   #unnest(cols = c(fitVariable))
#
# final_data() %>% distinct(variable)
#
#
# df <- data.frame(variable = 'Temp', x = seq(0, 30, by=0.1))
# df %>% mutate(predict = predict.glm(model(model_table, 'temp'), df, type = 'response'))
#
predation_survival_driver_func <- function(){
raw_data <- final_data()
model_table <- table_of_logistic_models(raw_data)
x_values <- x_value_df(range_of_params())
survival_table <- survival_prediction_table(x_values, model_table)
}
predation_survival_driver_func()
df <- predation_survival_driver_func()
df
#library("here")
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#source("general_logistic_model.R")
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
predation_survival_driver_func <- function(){
raw_data <- final_data()
model_table <- table_of_logistic_models(raw_data)
x_values <- x_value_df(range_of_params())
survival_table <- survival_prediction_table(x_values, model_table)
}
df <- predation_survival_driver_func()
#library("here")
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#source("general_logistic_model.R")
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table")
source("survival_prediction_table.R")
df <- predation_survival_driver_func()
df
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
predation_survival_driver_func <- function(){
raw_data <- final_data()
model_table <- table_of_logistic_models(raw_data)
x_values <- x_value_df(range_of_params())
survival_table <- survival_prediction_table(x_values, model_table)
}
predation_survival_driver_func()
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- final_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of x incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
head(predation_survival_driver_func())
devtools::install_github("collectivemedia/tictoc")
install.packages('tictoc')
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- final_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of x incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
library('tictoc')
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
tic()
df <-  predation_survival_driver_func()
toc()
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- full_raw_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of x incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- final_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of x incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
library('tictoc')
tic()
df <-  predation_survival_driver_func()
toc()
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- full_raw_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- final_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of x incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
library('tictoc')
tic()
df <-  predation_survival_driver_func()
toc()
df <-  predation_survival_driver_func()
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
predation_survival_driver_func()
raw_data <- full_raw_data()
model_table <- table_of_logistic_models(raw_data)
x_values <- x_value_df(range_of_params())
survival_table <- survival_prediction_table(x_values, model_table)
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- full_raw_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
head(predation_survival_driver_func())
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- full_raw_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
head(predation_survival_driver_func())
library("tidyverse")
library("openxlsx")
library("rstudioapi")
library("broom")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("data_processing.R")
source("prediction_tables.R")
source("model_table.R")
source("survival_prediction_table.R")
# driver function that outputs a table of variables affecting predation survival,
# as well as the range of those values and prections
predation_survival_driver_func <- function(){
# create a dataframe of data from the literature
raw_data <- full_raw_data()
# create a table of glm's fitted to the literature data
model_table <- table_of_logistic_models(raw_data)
# create a table of incremented x values for each variable
x_values <- x_value_df(range_of_params())
# make predictions for the table of x values
survival_table <- survival_prediction_table(x_values, model_table)
}
head(predation_survival_driver_func())
df <- predation_survival_driver_func()
df %>%
filter(virable == 'length')
df %>%
filter(variable == 'length')
setwd("~/Documents/predation")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival))
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
findUpperBound = function(dataFrame, xName, yName, dataPointX, dataPointY){
newData = dataFrame %>%
mutate(strike = ifelse(({{xName}} < dataPointX & {{yName}} < dataPointY),0,1))
}
hiTempEggData = read.xlsx(xlsxFile = "./inSALMO Redd Parameters.xlsx",
sheet = "mortReddHiTT",
na.strings = "NA") %>%
select(Temp_C, singleDaySurvival) %>%
mutate(scaledSur = singleDaySurvival/max(singleDaySurvival))
# filter out the non outter bounds data points
hiTempFilteredData = map2_df(hiTempEggData$Temp_C, hiTempEggData$scaledSur, ~findUpperBound(hiTempEggData, Temp_C, scaledSur, .x, .y)) %>%
group_by(Temp_C, scaledSur) %>%
summarise(flag = mean(strike)) %>%
ungroup() %>%
filter(flag == 1)
# do a logistic fit
hiTempEggModel = glm(hiTempFilteredData$scaledSur ~ hiTempFilteredData$Temp_C,
family=binomial(logit),
data=hiTempFilteredData)
# add in predictions for plotting
hiTempFilteredData = hiTempFilteredData %>%
mutate(predict = predict.glm(hiTempEggModel, type = "response")) %>%
arrange(Temp_C)
# solve for inSALMO Parameters (prevent form being negtive)
mortReddHiTT1 = -(log(1/0.1-1)+hiTempEggModel[[1]][1])/hiTempEggModel[[1]][2]
mortReddHiTT9 = -(log(1/0.9-1)+hiTempEggModel[[1]][1])/hiTempEggModel[[1]][2]
# Make a plot
ggplot(hiTempFilteredData, aes(x = Temp_C)) +
theme_classic(base_size = 30) +
labs(y = "Survival", x = "Temperature (C)") +
geom_point(aes(y = scaledSur)) +
geom_point(data = hiTempEggData, aes(x = Temp_C, y = scaledSur), shape = 1, size = 3) +
geom_path(aes(y = predict), color = "red")
