E2I = 0.1,
I2D = 0.01)
Agent1 <- AgentGen1(100, 2, 3)
nTime = 50
Model1 <- ABM1(Agent1, par1, nTime=nTime)
plot(1:nTime, Model1$S, type = "l", col = "purple", ylim = c(0, 100))
lines(1:nTime, Model1$E, col = "orange")
lines(1:nTime, Model1$I, col = "red")
lines(1:nTime, Model1$R, col = "seagreen")
lines(1:nTime, Model1$D, col = "black")
par1 <- data.frame(MaxMix = 10,
S2E = 0.25,
E2I = 0.1,
I2D = 0.01)
nPop <- 1000
Agent1 <- AgentGen1(nPop, 2, 3)
nTime <-  50
Model1 <- ABM1(Agent1, par1, nTime=nTime)
plot(1:nTime, Model1$S, type = "l", col = "purple", ylim = c(0, nPop))
lines(1:nTime, Model1$E, col = "orange")
lines(1:nTime, Model1$I, col = "red")
lines(1:nTime, Model1$R, col = "seagreen")
lines(1:nTime, Model1$D, col = "black")
par1 <- data.frame(MaxMix = 10,
S2E = 0.25,
E2I = 0.1,
I2D = 0.02)
nPop <- 1000
Agent1 <- AgentGen1(nPop, 2, 3)
nTime <-  50
Model1 <- ABM1(Agent1, par1, nTime=nTime)
plot(1:nTime, Model1$S, type = "l", col = "purple", ylim = c(0, nPop))
lines(1:nTime, Model1$E, col = "orange")
lines(1:nTime, Model1$I, col = "red")
lines(1:nTime, Model1$R, col = "seagreen")
lines(1:nTime, Model1$D, col = "black")
par1 <- data.frame(MaxMix = 10,
S2E = 0.25,
E2I = 0.05,
I2D = 0.02)
nPop <- 1000
Agent1 <- AgentGen1(nPop, 2, 3)
nTime <-  50
Model1 <- ABM1(Agent1, par1, nTime=nTime)
plot(1:nTime, Model1$S, type = "l", col = "purple", ylim = c(0, nPop))
lines(1:nTime, Model1$E, col = "orange")
lines(1:nTime, Model1$I, col = "red")
lines(1:nTime, Model1$R, col = "seagreen")
lines(1:nTime, Model1$D, col = "black")
install.packages('microbenchmark')
library(microbenchmark)
set.seed(100)
col1 <- runif(12^4, 0, 2)
col2 <- rnorm(12^4, 0, 2)
col3 <- rpois(12^4, 3)
col4 <- rchisq(12^4, 2)
df <- data.frame(col1, col2, col3, col4)
head(df)
}, times=10L)
original <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4'] + ) > 4 { # check if > 4
df[i, 5] <- 'greater_than_4' # assign fifth column
} else {
df[i, 5] <- 'less_than_4' # assign fifth column
}
}
}, times=10L)
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4'] + ) > 4) { # check if > 4
df[i, 5] <- 'greater_than_4' # assign fifth column
} else {
df[i, 5] <- 'less_than_4' # assign fifth column
}
library(microbenchmark)
set.seed(100)
# create dataframe
col1 <- runif(12^4, 0, 2)
col2 <- rnorm(12^4, 0, 2)
col3 <- rpois(12^4, 3)
col4 <- rchisq(12^4, 2)
df <- data.frame(col1, col2, col3, col4)
head(df)
# using for loops
original <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4'] + ) > 4) { # check if > 4
df[i, 5] <- 'greater_than_4' # assign fifth column
} else {
df[i, 5] <- 'less_than_4' # assign fifth column
}
}
}, times=10L)
1+1
original <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4'] + ) > 4) { # check if > 4
df[i, 5] <- 'greater_than_4' # assign fifth column
} else {
df[i, 5] <- 'less_than_4' # assign fifth column
}
}
}, times=10L)
original <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
df[i, 5] <- 'greater_than_4' # assign fifth column
} else {
df[i, 5] <- 'less_than_4' # assign fifth column
}
}
}, times=10L)
original <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
df[i, 5] <- 'greater_than_4' # assign fifth column
} else {
df[i, 5] <- 'less_than_4' # assign fifth column
}
}
}, times=10)
original <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
df[i, 5] <- 'greater_than_4' # assign fifth column
} else {
df[i, 5] <- 'less_than_4' # assign fifth column
}
}
}, times=1)
original
original <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
df[i, 5] <- 'greater_than_4' # assign fifth column
} else {
df[i, 5] <- 'less_than_4' # assign fifth column
}
}
}, times=10L)
original
output <- character(nrow(df)) # initialize output vector
preallocate <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
df[i, 5] <- 'greater_than_4' # assign fifth column
} else {
df[i, 5] <- 'less_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
original
output <- character(nrow(df)) # initialize output vector
preallocate <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
} else {
output[i] <- 'less_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
original
output
preallocate
apply_output <- microbenchmark({
myfunc <- function(x) {
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
'greater_than_4' # assign fifth column
} else {
'less_than_4' # assign fifth column
}
}
output <- apply(df[, c(1:4)], 1, FUN = myfunc) # apply myfunc function
df$output <- output
}, times=10L)
apply_output
apply_output <- microbenchmark({
myfunc <- function(x) {
if ((x[i, 'col1'] + x[i, 'col2'] + x[i, 'col3'] + x[i, 'col4']) > 4) { # check if > 4
'greater_than_4' # assign fifth column
} else {
'less_than_4' # assign fifth column
}
}
output <- apply(df[, c(1:4)], 1, FUN = myfunc) # apply myfunc function
df$output <- output
}, times=10L)
apply_output <- microbenchmark({
myfunc <- function(x) {
if ((x['col1'] + x['col2'] + x['col3'] + x['col4']) > 4) { # check if > 4
'greater_than_4' # assign fifth column
} else {
'less_than_4' # assign fifth column
}
}
output <- apply(df[, c(1:4)], 1, FUN = myfunc) # apply myfunc function
df$output <- output
}, times=10L)
apply_output
library(compiler)
myFuncCmp <- cmpfun(myfunc)
bytecode_output <- microbenchmark({
output <- apply(df[, c(1:4)], 1, FUN = myfunc)
})
output
myFuncCmp <- cmpfun(myfunc)
bytecode_output <- microbenchmark({
output <- apply(df[, c(1:4)], 1, FUN = myfunc)
df$output <- output
})
bytecode_output
output <- character(nrow(df)
condition <- (df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4
head(condition)
conditions_outside <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if (condition[i]) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
} else {
output[i] <- 'less_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
condition <- (df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4
output <- character(nrow(df)
condition <- (df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4
head(condition)
conditions_outside <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if (condition[i]) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
} else {
output[i] <- 'less_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
output <- character(nrow(df)
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
head(condition)
conditions_outside <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if (condition[i]) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
} else {
output[i] <- 'less_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
set.seed(100)
# create dataframe
col1 <- runif(12^4, 0, 2)
col2 <- rnorm(12^4, 0, 2)
col3 <- rpois(12^4, 3)
col4 <- rchisq(12^4, 2)
df <- data.frame(col1, col2, col3, col4)
head(df)
output <- character(nrow(df)
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
head(condition)
conditions_outside <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if (condition[i]) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
} else {
output[i] <- 'less_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
df$col1
output <- character(nrow(df)
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
head(condition)
conditions_outside <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if (condition[i]) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
} else {
output[i] <- 'less_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
output <- character(nrow(df)
)
output <- character(nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
head(condition)
conditions_outside <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if (condition[i]) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
} else {
output[i] <- 'less_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
conditions_outside
output <- rep("less_than_4", nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
head(condition)
conditions_outside <- microbenchmark({
for (i in 1:nrow(df))[condition]{ # for every row
if (condition[i]) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
output <- rep("less_than_4", nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
output <- rep("less_than_4", nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
head(condition)
conditions_outside <- microbenchmark({
for (i in (1:nrow(df))[condition]){ # for every row
if (condition[i]) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
output <- rep("less_than_4", nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
head(condition)
only_trues <- microbenchmark({
for (i in (1:nrow(df))[condition]){ # for every row
if (condition[i]) { # check if > 4
output[i] <- 'greater_than_4' # assign fifth column
}
}
df$output <- output
}, times=10L)
only_trues
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
ifelse_output <- microbenchmark({
output <- ifelse(condition, "greater_than_4", "less_than_4")
df$output <- output
}, times=10L)
ifelse_output
which_smart <- microbenchmark({
want = which(rowSums(df) > 4)
output = rep("less_than_4", times = nrow(df))
output[want] = "greater_than_4"
}, times=10L)
col1 <- runif(12^4, 0, 2)
col2 <- rnorm(12^4, 0, 2)
col3 <- rpois(12^4, 3)
col4 <- rchisq(12^4, 2)
df <- data.frame(col1, col2, col3, col4)
which_smart <- microbenchmark({
want = which(rowSums(df) > 4)
output = rep("less_than_4", times = nrow(df))
output[want] = "greater_than_4"
}, times=10L)
which_smart
library(data.table)
library(microbenchmark)
set.seed(100)
# create dataframe
col1 <- runif(12^4, 0, 2)
col2 <- rnorm(12^4, 0, 2)
col3 <- rpois(12^4, 3)
col4 <- rchisq(12^4, 2)
df <- data.frame(col1, col2, col3, col4)
head(df)
set_output <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
set(df, i, 5L, 'greater_than_4') # assign fifth column
} else {
set(df, i, 5L, 'less_than_4') # assign fifth column
}
}
}, times=10L)
set_output
set.seed(100)
# create dataframe
col1 <- runif(12^4, 0, 2)
col2 <- rnorm(12^4, 0, 2)
col3 <- rpois(12^4, 3)
col4 <- rchisq(12^4, 2)
df <- data.frame(col1, col2, col3, col4)
df$output <- ""
head(df)
set_output <- microbenchmark({
for (i in 1:nrow(df)){ # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
set(df, i, 5L, 'greater_than_4') # assign fifth column
} else {
set(df, i, 5L, 'less_than_4') # assign fifth column
}
}
}, times=10L)
set_output
source("C:/Users/Ted/Desktop/predation/general_logistic_model.R", echo=TRUE)
setwd("C:/Users/Ted/Desktop/predation")
source("C:/Users/Ted/Desktop/predation/general_logistic_model.R", echo=TRUE)
source("C:/Users/Ted/Desktop/predation/general_logistic_model.R", echo=TRUE)
source("C:/Users/Ted/Desktop/predation/general_logistic_model.R", echo=TRUE)
temp <- 3.69
S <- calculateSurvival(path, sheetName, temp)
S
str(S)
S[1]
S[2]
S[0]
seq(0,30, by=0.1)
data.frame(matrix(unlist(seq(0,30,by=0.1)), nrow=132, byrow=TRUE),stringsAsFactors=FALSE)
data.frame(seq(0,30,by=0.1))
temperatures <- \seq(0,30, by=0.1)
temperatures <- c(seq(0,30, by=0.1))
temperatures
data.frame(temperatures)
temperature <- seq(0,30,by=0.1)
temperature
str(temperature)
model <- makeModel(makeData(path,sheetName))
temperature <- seq(0,30,by=0.1)
df <- data.frame(temperature)
model <- makeModel(makeData(path,sheetName))
df %>%
mutate(predict = predict.glm(model, type = "response"))
df
df %>%
mutate(predict = predict.glm(model))
setwd("C:/Users/Ted/Desktop/predation")
predTData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, jounral) %>%
mutate(unitlessValue = 1-value/max(value)) %>%
ungroup()
# do a logistic fit
predTModel = glm(predTData$unitlessValue ~ predTData$temperature,
family=quasibinomial(logit),
data=predTData)
# add in predictions for plotting
predTWFitData = predTData %>%
mutate(predict = predict.glm(predTModel, type = "response")) %>%
arrange(temperature)
setwd("C:/Users/Ted/Desktop/predation")
predTData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, journal, species) %>%
mutate(unitlessValue = 1-value/max(value)) %>%
ungroup()
# do a logistic fit
predTModel = glm(predTData$unitlessValue ~ predTData$X,
family=quasibinomial(logit),
data=predTData)
# add in predictions for plotting
predTWFitData = predTData %>%
mutate(predict = predict.glm(predTModel, type = "response")) %>%
arrange(X)
predTWFitData
temperature <- seq(0,30,by=0.1)
df <- data.frame(temperature)
model <- makeModel(makeData(path,sheetName))
df %>%
mutate(predict = predict.glm(model, type = "response"))
df %>%
apply(calculateSurvival(path, sheetName, temperature))
apply(df, MARGIN = 1, fun = S(path, sheetName, df$temperature))
apply(df, MARGIN = 1, FUN = S(path, sheetName, df$temperature))
apply(df, MARGIN = 1, FUN = calculateSurvival(path, sheetName, df$temperature))
calculateSurvival <- function(path, sheetName, habitatVariable){
data <- makeData(path, sheetName)
model <- makeModel(data)
X1 <- calculateX1(model)
X9 <- calculateX9(model)
B <- (log(0.1/0.9) * 2) / (X1 - X9)
A <- log(0.1/0.9) - (B * X1)
S <- exp(A + (B * habitatVariable)) / (1 + exp(A + (B * habitatVariable)))
}
apply(df, MARGIN = 1, FUN = calculateSurvival(path, sheetName, df$temperature))
df
predict.glm(df, newdata = df$temperature, type = "response")
temperature <- seq(0,30,by=0.1)
df <- data.frame(temperature)
model <- makeModel(makeData(path,sheetName))
df %>%
mutate(predict = predict.glm(model, newdata = df$temperature, type = "response")
)
temperature <- seq(0,30,by=0.1)
df <- data.frame(temperature)
model <- makeModel(makeData(path,sheetName))
df %>%
mutate(predict = predict.glm(df, newdata = df$temperature, type = "response"))
df %>%
mutate(predict = predict.glm(df, type = "response"))
df %>%
mutate(predict = predict.glm(df, type = "response"))
df %>%
mutate(predict = predict.glm(model, type = "response"))
predTData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, journal, species) %>%
mutate(unitlessValue = 1-value/max(value)) %>%
ungroup()
predTData
df %>%
mutate(predict = predict.glm(model, newdata = df$temperature, type = "response"))
df$temperature
