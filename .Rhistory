library("tidyverse")
library("openxlsx")
install.packages("tidyverse")
library("tidyverse")
library("openxlsx")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/tidyr/tidyr_1.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
install.packages("tidyverse")
setwd("~/Documents/predation")
# Each paremter gets it own section
##### Libraries #####
library(tidyverse)
library(lubridate)
# Open and write excel files
library(openxlsx)
library(viridis)
library(broom)
predTData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, jounral) %>%
mutate(unitlessValue = 1-value/max(value)) %>%
ungroup()
# do a logistic fit
predTModel = glm(predTData$unitlessValue ~ predTData$temperature,
family=quasibinomial(logit),
data=predTData)
# add in predictions for plotting
predTWFitData = predTData %>%
mutate(predict = predict.glm(predTModel, type = "response")) %>%
arrange(temperature)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredT1 = -(log(1/0.1-1)+predTModel[[1]][1])/predTModel[[1]][2]
mortFishAqPredT9 = -(log(1/0.9-1)+predTModel[[1]][1])/predTModel[[1]][2]
# Plot
ggplot(predTWFitData, aes(x = temperature)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "T (C)") +
geom_point(aes(y = unitlessValue)) +
geom_path(aes(y = predict), color = "red")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival))
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")+
ggtitle("Using mortFishByMort data")
predTData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, jounral) %>%
mutate(unitlessValue = 1-value/max(value)) %>%
ungroup()
predTData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, journal) %>%
mutate(unitlessValue = 1-value/max(value)) %>%
ungroup()
predTModel = glm(predTData$unitlessValue ~ predTData$temperature,
family=quasibinomial(logit),
data=predTData)
predTModel = glm(predTData$unitlessValue ~ predTData$X,
family=quasibinomial(logit),
data=predTData)
predTModel = glm(predTData$unitlessValue ~ predTData$x,
family=quasibinomial(logit),
data=predTData)
predTWFitData = predTData %>%
mutate(predict = predict.glm(predTModel, type = "response")) %>%
arrange(x)
ggplot(predTWFitData, aes(x = x)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "T (C)") +
geom_point(aes(y = unitlessValue)) +
geom_path(aes(y = predict), color = "red")
predTData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, journal) %>%
mutate(unitlessValue = value/max(value)) %>%
ungroup()
# do a logistic fit
predTModel = glm(predTData$unitlessValue ~ predTData$x,
family=quasibinomial(logit),
data=predTData)
# add in predictions for plotting
predTWFitData = predTData %>%
mutate(predict = predict.glm(predTModel, type = "response")) %>%
arrange(x)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredT1 = -(log(1/0.1-1)+predTModel[[1]][1])/predTModel[[1]][2]
mortFishAqPredT9 = -(log(1/0.9-1)+predTModel[[1]][1])/predTModel[[1]][2]
# Plot
ggplot(predTWFitData, aes(x = x)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "T (C)") +
geom_point(aes(y = unitlessValue)) +
geom_path(aes(y = predict), color = "red")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival))
#dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# filter(units == "not eaten") %>%
# mutate(dailySurvival = measure)
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")+
ggtitle("Using mortFishByMort data")
##### Data on predation preventation from turbidity (mortFishAqPredU) #####
# load the data
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier",
!is.na(turb_NTU)) %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = dailySurvival-min(dailySurvival),
dailySurvival = dailySurvival/max(dailySurvival))
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$turb_NTU,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(turb_NTU)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# overide probably with new scaling should take out
mortFishAqPredL1 = -50
mortFishAqPredL9 = 35
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*turb_NTU)/(1+exp(LogistA+LogistB*turb_NTU)))
# Plot
ggplot(predLWFitData, aes(x = turb_NTU)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "T (C)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
library('tidyverse')
prey_conv <- function(a, B, pred_L){
exp(a + B * log(pred_L))
}
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = prey_conv(0.443, 0.774, length_mm),
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData  <-  predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
filter(max_prey_length <= 200)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (mm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predTData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, journal) %>%
mutate(unitlessValue = 1-value/max(value)) %>%
ungroup()
# do a logistic fit
predTModel = glm(predTData$unitlessValue ~ predTData$x,
family=quasibinomial(logit),
data=predTData)
# add in predictions for plotting
predTWFitData = predTData %>%
mutate(predict = predict.glm(predTModel, type = "response")) %>%
arrange(x)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredT1 = -(log(1/0.1-1)+predTModel[[1]][1])/predTModel[[1]][2]
mortFishAqPredT9 = -(log(1/0.9-1)+predTModel[[1]][1])/predTModel[[1]][2]
# Plot
ggplot(predTWFitData, aes(x = x)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "T (C)") +
geom_point(aes(y = unitlessValue)) +
geom_path(aes(y = predict), color = "red")
predTData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortAqByPredMet",
na.strings = "NA") %>%
group_by(author, year, journal) %>%
mutate(unitlessValue = 1-value/max(value)) %>%
ungroup()
# do a logistic fit
predTModel = glm(predTData$unitlessValue ~ predTData$x,
family=quasibinomial(logit),
data=predTData)
# add in predictions for plotting
predTWFitData = predTData %>%
mutate(predict = predict.glm(predTModel, type = "response")) %>%
arrange(x)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredT1 = -(log(1/0.1-1)+predTModel[[1]][1])/predTModel[[1]][2]
mortFishAqPredT9 = -(log(1/0.9-1)+predTModel[[1]][1])/predTModel[[1]][2]
# Plot
ggplot(predTWFitData, aes(x = x)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "T (C)") +
geom_point(aes(y = unitlessValue)) +
geom_path(aes(y = predict), color = "red")
