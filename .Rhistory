library("tidyverse")
library("openxlsx")
install.packages("tidyverse")
library("tidyverse")
library("openxlsx")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/tidyr/tidyr_1.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
install.packages("tidyverse")
library('PerformanceAnalytics')
install.packages('PerformanceAnalytics')
my_data <- testdata1.3[, c(2,3,7,8,33:38,48,53)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
library('PerformanceAnalytics')
my_data <- testdata1.3[, c(2,3,7,8,33:38,48,53)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data <- testdata1.3[, c(2,3,7,8,33:38,48,53)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
setwd("~/Documents/predation")
read.csv('./lmb_size_dist.csv')
library('tidyverse')
df <- read.csv('./lmb_size_dist.csv')
df %>%
mutate(max_prey_length = length_cm * 0.4)
df %>%
mutate(max_prey_length = length_cm * 0.4 / 10)
model <- glm(df$cumulative_proportion ~ df$max_prey_length,
family = quasibinomial(logit),
data = df)
df <- read.csv('./lmb_size_dist.csv') %>%
mutate(max_prey_length = length_cm * 0.4 / 10)
model <- glm(df$cumulative_proportion ~ df$max_prey_length,
family = quasibinomial(logit),
data = df)
model
predLData <- read.csv('./lmb_size_dist.csv') %>%
mutate(max_prey_length = length_cm * 0.4 / 10)
predLModel <- glm(predLData$cumulative_proportion ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = cumulative_proportion)) +
geom_path(aes(y = predict), color = "red")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# filter(units == "not eaten") %>%
# mutate(dailySurvival = measure)
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
setwd("~/Documents/predation")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival),
dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# filter(units == "not eaten") %>%
# mutate(dailySurvival = measure)
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival))
#dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# filter(units == "not eaten") %>%
# mutate(dailySurvival = measure)
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival))
library(tidyverse)
library(lubridate)
# Open and write excel files
library(openxlsx)
library(viridis)
library(broom)
predLData = read.xlsx(xlsxFile = "./inSALMO Fish Parameters.xlsx",
sheet = "mortFishByMort",
na.strings = "NA") %>%
filter(note != "outlier") %>%
mutate(dailySurvival = NA,
dailySurvival = ifelse(units == "survival", measure^(1/time_days), dailySurvival),
dailySurvival = ifelse(units == "daily survival", measure, dailySurvival),
dailySurvival = ifelse(units == "relative vlun.", 1-measure, dailySurvival))
#dailySurvival = ifelse(units == "not eaten", measure, dailySurvival))
# filter(units == "not eaten") %>%
# mutate(dailySurvival = measure)
# do a logistic fit
predLModel = glm(predLData$dailySurvival ~ predLData$length_cm,
family=quasibinomial(logit),
data=predLData)
# add in predictions for plotting
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(length_cm)
# solve for inSALMO Parameters
# convert form m to cm
mortFishAqPredL1 = -(log(1/0.1-1)+predLModel[[1]][1])/predLModel[[1]][2]
mortFishAqPredL9 = -(log(1/0.9-1)+predLModel[[1]][1])/predLModel[[1]][2]
# we are using as a min survival so want to pass under the data not through it
mortFishAqPredL1 = 2
mortFishAqPredL9 = 8
LogistB	= log((0.9/0.1)^2)/(mortFishAqPredL9-mortFishAqPredL1)
LogistA	= log(0.1/0.9)-LogistB*(mortFishAqPredL1)
predLWFitData = predLWFitData %>%
mutate(overide = exp(LogistA+LogistB*length_cm)/(1+exp(LogistA+LogistB*length_cm)))
# Plot
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")
ggplot(predLWFitData, aes(x = length_cm)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = dailySurvival)) +
geom_path(aes(y = predict), color = "red")+
geom_path(aes(y = overide), color = "blue")+
ggtitle("Using mortFishByMort data")
predLData <- read.csv('./lmb_size_dist.csv') %>%
mutate(max_prey_length = length_cm * 0.4 / 10)
predLModel <- glm(predLData$cumulative_proportion ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = cumulative_proportion)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
df
predLData <- read.csv('./lmb_size_dist.csv') %>%
mutate(max_prey_length = length_cm * 0.4 / 10,
safety = cumulative_proportion - proportion_of_total)
predLData
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = length_cm * 0.4 / 10,
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = length_cm * 0.4 / 10,
safety = cumulative_proportion - proportion_of_total)
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = length_mm * 0.4 / 10,
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = length_mm * 0.4 / 10,
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
select(max_prey_length < 20)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = length_mm * 0.4 / 10,
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
filter(max_prey_length < 20)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = length_mm * 0.5 / 10,
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
filter(max_prey_length < 20)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
debugSource("~/Documents/predation/length_risk_test.R", echo=TRUE)
debugSource("~/Documents/predation/length_risk_test.R", echo=TRUE)
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
predDData <- data.frame(density = c(3, 6, 12),
survival = c(.87, .78, .84))
dfgdsgf
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
predDData <- data.frame(density = c(3, 6, 12),
survival = c(.87, .78, .84))
predDModel <- glm(predDData$survival ~ predLData$density,
family = quasibinomial(logit),
data = predDData)
predDData <- data.frame(density = c(3, 6, 12),
survival = c(.87, .78, .84))
predDModel <- glm(predDData$survival ~ predDData$density,
family = quasibinomial(logit),
data = predDData)
predDWFitData = predDData %>%
mutate(predict = predict.glm(predDModel, type = "response")) %>%
arrange(density)
ggplot(predDWFitData, aes(x = density)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Density (fish / m^2)") +
geom_point(aes(y = survival)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = length_mm * 0.21 / 10,
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
filter(max_prey_length < 25)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
log(2.718)
prey_conv <- function(a, B, pred_L){
exp(a + B * log(pred_L))
}
source("~/Documents/predation/length_risk_test.R", echo=TRUE)
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = prey_conv(0.443, 0.774, length_mm/10),
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLData
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = prey_conv(0.443, 0.774, length_mm),
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLData
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = prey_conv(0.443, 0.774, length_mm),
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
filter(max_prey_length <= 20)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = prey_conv(0.443, 0.774, length_mm),
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
filter(max_prey_length =< 20)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
filter(max_prey_length <= 20)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLWFitData
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = prey_conv(0.443, 0.774, length_mm),
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
filter(max_prey_length <= 200)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (cm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLData <- read.csv('./lmb_stb_combined.csv') %>%
mutate(max_prey_length = prey_conv(0.443, 0.774, length_mm),
safety = cumulative_proportion - proportion_of_total)
predLModel <- glm(predLData$safety ~ predLData$max_prey_length,
family = quasibinomial(logit),
data = predLData)
predLWFitData = predLData %>%
mutate(predict = predict.glm(predLModel, type = "response")) %>%
arrange(max_prey_length) %>%
filter(max_prey_length <= 200)
ggplot(predLWFitData, aes(x = max_prey_length)) +
theme_classic(base_size = 30) +
labs(y = "Fraction present", x = "Length (mm)") +
geom_point(aes(y = safety)) +
geom_path(aes(y = predict), color = "red") +
ggtitle("Using cum. prop. and gape limitation")
predLWFitData
